// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  displayName String?
  email       String   @unique
  image       String?
  password    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  players Player[]
}

model Player {
  id       String   @id @unique
  name     String
  isGuest  Boolean  @default(false)
  joinedAt DateTime @default(now())
  user     User?    @relation(fields: [userId], references: [id])
  userId   String?
  image    String?  @db.Text

  games       ChessGame[]
  chessResult ChessResult[]
}

model ChessGame {
  id String @id

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())
  status       GameStatus
  moves        ChessMove[]
  result       ChessResult?
  currentBoard String
  turn         String

  whitePlayerRemainingTime Int
  blackPlayerRemainingTime Int

  players Player[]
}

model ChessMove {
  id        String    @id @default(cuid())
  game      ChessGame @relation(fields: [gameId], references: [id])
  gameId    String
  playerId  String
  move      String
  createdAt DateTime  @default(now())
}

model ChessResult {
  id              String         @id @default(cuid())
  game            ChessGame      @relation(fields: [gameId], references: [id])
  gameId          String         @unique
  winnerId        String?
  resultType      GameResultType
  whitePlayerId   String
  blackPlayerId   String
  whitePlayerName String?
  blackPlayerName String?
  whiteScore      Int
  blackScore      Int
  finishedAt      DateTime       @default(now())
  Player          Player?        @relation(fields: [playerId], references: [id])
  playerId        String?
}

enum GameStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  RESIGNED
}

enum GameResultType {
  WIN
  DRAW
  RESIGNATION
  TIMEOUT
}
